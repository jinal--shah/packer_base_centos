#!/bin/sh
# chkconfig: 2345 99 01
### BEGIN INIT INFO
# Provides:
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Control enovation_fe service
# Description:       enovation_fe service
### END INIT INFO

# ... get environment
if [ -f "/etc/eurostar/eurostar_service_info" ]; then
    . /etc/eurostar/eurostar_service_info
fi

if [[ -z $EUROSTAR_ENV ]]; then
    echo "... couldn't find the env to which this instance belongs."
    EUROSTAR_ENV=unknown
fi

echo "... running in EUROSTAR_ENV $EUROSTAR_ENV"

ENV_SPECIFIC_VARS=""
if [[ -f /etc/enovation-fe/env_vars.$EUROSTAR_ENV ]]; then
    while read line; do
        if echo "$line" | grep '^ *#' 2>/dev/null || echo "$line" | grep '^ *$' 2>/dev/null
        then
            echo "$0 skipping comment or blank line in env-specific config"
        else
            ENV_SPECIFIC_VARS="export $line\n$ENV_SPECIFIC_VARS"
        fi
    done < /etc/enovation-fe/env_vars.$EUROSTAR_ENV
    `echo -e $ENV_SPECIFIC_VARS`
fi

ENV_VARS=""
dir="/srv/enovation_fe"
cmd="$ENV_VARS forever start -l /var/log/enovation_fe/forever.log -o /var/log/enovation_fe/app.log -e /var/log/enovation_fe/app-err.log -a ${dir}/server/index.js"
user="root"

name=`basename $0`
pid_file="/var/run/enovation_fe.pid"
stdout_log="/var/log/enovation_fe/.log"
stderr_log="/var/log/enovation_fe/.err"

get_pid() {
    cat "$pid_file"
}

is_running() {
    [ -f "$pid_file" ] && ps `get_pid` > /dev/null 2>&1
}

if [ ! -d /var/log/enovation_fe ]; then mkdir /var/log/enovation_fe && chown $user /var/log/enovation_fe; fi

case "$1" in
    start)
    if is_running; then
        echo "Already started: $pid_file(`get_pid`)"
    else
        echo "Starting $name"
        touch $pid_file && chown $user $pid_file
        # TODO ... this is a terrible way to start a service - try using daemon instead, and running as non-root.
        HOME=/root su "$user" -m -c "cd $dir && $cmd >> $stdout_log 2>> $stderr_log & echo \$! > $pid_file"
        if ! is_running; then
            echo "Unable to start, see $stdout_log and $stderr_log"
            exit 1
        fi
    fi
    ;;
    stop)
    if is_running; then
        echo -n "Stopping $name.."
        kill `get_pid`
        for i in {1..10}
        do
            if ! is_running; then
                break
            fi

            echo -n "."
            sleep 1
        done
        echo

        if is_running; then
            echo "Not stopped; may still be shutting down or shutdown may have failed"
            exit 1
        else
            echo "Stopped"
            if [ -f "$pid_file" ]; then
                rm "$pid_file"
            fi
        fi
    else
        echo "Not running"
    fi
    ;;
    restart)
    $0 stop
    if is_running; then
        echo "Unable to stop, will not attempt to start"
        exit 1
    fi
    $0 start
    ;;
    status)
    if is_running; then
        echo "Running: $pid_file(`get_pid`)"
    else
        echo "Stopped"
        exit 1
    fi
    ;;
    *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
    ;;
esac

exit 0
