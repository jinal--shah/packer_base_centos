#!/bin/bash
# vim: et sr sw=4 ts=4 smartindent:
# 00050-configure_rsyslog_for_env.sh
#
# Assumes the existence of certain env vars, and uses them
# to append forwarding rules to the rsyslog conf - makes sure
# messages go where you expect.
#

SERVICE_NAME=rsyslog
CONF=/etc/rsyslog.conf
REQUIRED_VARS="
    EUROSTAR_ENV
    EUROSTAR_DOMAIN_AWS_PROD
    EUROSTAR_DOMAIN_AWS_NONPROD
"

INFO_FILES="
    /etc/eurostar/eurostar_domain_info
    /etc/eurostar/eurostar_service_info
"
FAILED_VALIDATION=''
TIMESTAMP="$(date +'%Y-%m-%d %H:%M:%S')"
RC=0 # return code

# The following vars could be set in an /etc/eurostar/*_info file if other
# apps or cloud-init steps need them (rather than hardcoding in multiple files)
# EUROSTAR_ELK_HOST_SUFFIX: host without domain suffix (suffix differs between envs)
EUROSTAR_ELK_HOST_SUFFIX=log-ingester
EUROSTAR_ELK_SYSLOG_PORT=2514
ALERTLOGIC_HOST=alertlogic-tmc.aws.eurostar.com
ALERTLOGIC_SYSLOG_PORT=2514

read -r -d '' RULE_BOILERPLATE_TEXT << 'EOF'
# The statement between the begin ... end define a SINGLE forwarding
# rule. They belong together, do NOT split them. If you create multiple
# forwarding rules, duplicate the whole block!
# Remote Logging (we use TCP for reliable delivery)
#
# An on-disk queue is created for this action. If the remote host is
# down, messages are spooled to disk and sent when it is up again.''
EOF

function check_var_defined() {
    var_name="$1"
    var_val="${!var_name}"
    if [[ -z $var_val ]]; then
        echo "$0 ERROR: You must pass \$$var_name to this script" >&2
        FAILED_VALIDATION="you bet'cha"
        return 1
    fi
}

for info_file in $INFO_FILES; do
    . $info_file
done

for this_var in $REQUIRED_VARS; do
    check_var_defined $this_var
done

if [[ ! -w $CONF ]]; then
    echo "$0 ERROR: $CONF does not exist or is not writable."
    echo "$0 ERROR: ... can't continue."
    FAILED_VALIDATION="you bet'cha"
fi

if [[ ! -z $FAILED_VALIDATION ]]; then
    echo "$0 EXIT: FAILURE. One of more required vars not passed to this script."
    exit 1
fi

case $EUROSTAR_ENV in
    prod|pre)   EUROSTAR_DOMAIN=$EUROSTAR_DOMAIN_AWS_PROD
                ;;
    *)          EUROSTAR_DOMAIN=$EUROSTAR_DOMAIN_AWS_NONPROD
                ;;
esac

section_marker="GENERATED BY CLOUD-INIT ELK_SYSLOG"
echo "$0 INFO: removing any previous ELK_SYSLOG rule from $CONF"
sed -i "/$section_marker/,/END $section_marker/d" $CONF

echo "$0 INFO: adding ELK_SYSLOG rule to $CONF"
cat << EOF >> $CONF
# [$TIMESTAMP] $section_marker $0
# ### begin forwarding rule ###
$RULE_BOILERPLATE_TEXT
\$WorkDirectory /var/lib/rsyslog # where to place spool files
\$ActionQueueFileName fwdRule0 # unique name prefix for spool files
\$ActionQueueMaxDiskSpace 1g   # space limit (use as much as possible)
\$ActionQueueSaveOnShutdown on # save messages to disk on shutdown
\$ActionQueueType LinkedList   # run asynchronously
\$ActionResumeRetryCount -1    # infinite retries if host is down
# remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional
*.* @@$EUROSTAR_ELK_HOST_SUFFIX.$EUROSTAR_DOMAIN:$EUROSTAR_ELK_SYSLOG_PORT
# ### end of the forwarding rule ###
# END $section_marker $0

EOF

section_marker="GENERATED BY CLOUD-INIT ALERTLOGIC_SYSLOG"
echo "$0 INFO: removing any previous ALERTLOGIC rule from $CONF"
sed -i "/$section_marker/,/END $section_marker/d" $CONF

if [[ "$EUROSTAR_ENV" == "prod" ]]; then
    echo "$0 INFO: env is prod, so configuring to forward to alertlogic rsyslog"

    echo "$0 INFO: adding ALERTLOGIC rule to $CONF"
    cat << EOF >> $CONF
# [$TIMESTAMP] $section_marker $0
# ### begin forwarding rule ###
$RULE_BOILERPLATE_TEXT
\$WorkDirectory /var/lib/rsyslog # where to place spool files
\$ActionQueueFileName fwdRule1 # unique name prefix for spool files
\$ActionQueueMaxDiskSpace 1g   # space limit (use as much as possible)
\$ActionQueueSaveOnShutdown on # save messages to disk on shutdown
\$ActionQueueType LinkedList   # run asynchronously
\$ActionResumeRetryCount -1    # infinite retries if host is down
# remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional
*.* @@$ALERTLOGIC_HOST:$ALERTLOGIC_SYSLOG_PORT
# ### end of the forwarding rule ###
# END $section_marker $0

EOF

fi

# ... (re)start $SERVICE_NAME
chkconfig $SERVICE_NAME on
echo "$0 INFO: starting up rsyslog"
service $SERVICE_NAME restart >/dev/null 2>&1

if ! service $SERVICE_NAME status 
then
    echo "$0 ERROR: problem (re)starting $SERVICE_NAME" >&2
    RC=1
fi
exit $RC

